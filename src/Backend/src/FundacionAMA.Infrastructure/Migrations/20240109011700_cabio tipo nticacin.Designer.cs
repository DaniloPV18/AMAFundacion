// <auto-generated />
using System;
using FundacionAMA.Infrastructure.Persistence.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FundacionAMA.Infrastructure.Migrations
{
    [DbContext(typeof(AMADbContext))]
    [Migration("20240109011700_cabio tipo nticacin")]
    partial class cabiotiponticacin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FundacionAMA.Domain.Entities.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ActivityType", (string)null);
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Beneficiary", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.ToTable("Beneficiaries");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.BeneficiaryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BeneficiaryType", (string)null);
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Brigade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("End")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Brigade");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PersonId");

                    b.ToTable("Brigades");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.BrigadeBeneficiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .IsFixedLength();

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("BeneficiaryId")
                        .HasColumnType("int");

                    b.Property<int>("BeneficiaryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BrigadeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("BeneficiaryTypeId");

                    b.HasIndex("BrigadeId");

                    b.ToTable("BrigadeBeneficiaries");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.BrigadeVoluntareer", b =>
                {
                    b.Property<int>("BrigadeId")
                        .HasColumnType("int");

                    b.Property<int>("VolunteerId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("BrigadeId", "VolunteerId");

                    b.HasIndex("VolunteerId");

                    b.ToTable("BrigadeVoluntareers");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Identificacion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("Nombre")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.CompanyUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyUsers");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.ConsultVolunteer", b =>
                {
                    b.Property<int>("Consult")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("consult");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("VolunteerId")
                        .HasColumnType("int")
                        .HasColumnName("volunteer_id");

                    b.HasKey("Consult")
                        .HasName("PK__ConsultV__ACEE1F39D2C73D2A");

                    b.HasIndex("VolunteerId");

                    b.ToTable("ConsultVolunteers");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("BrigadeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("DonationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("(N'')");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_DONATION_ID");

                    b.HasIndex("BrigadeId");

                    b.HasIndex("DonationTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.DonationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DonationType", (string)null);
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Donor", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("PersonId")
                        .HasName("PK_Donors");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.IdentificationType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_TipoIdentificacion");

                    b.ToTable("IdentificationType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Active = true,
                            Code = "CC",
                            CreatedAt = new DateTime(2024, 1, 8, 20, 16, 59, 856, DateTimeKind.Local).AddTicks(130),
                            CreatedBy = 0,
                            Description = "Cédula de ciudadanía",
                            Status = "A"
                        });
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("Donor")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)");

                    b.Property<short?>("IdentificationTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameCompleted")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("SecondLastName")
                        .HasColumnType("longtext");

                    b.Property<string>("SecondName")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("Volunteer")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id")
                        .HasName("PK_PERSON_ID");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IdentificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.RegistrationVolunteer", b =>
                {
                    b.Property<int>("VolunteerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("volunteer_id");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Activity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("activity");

                    b.Property<string>("Address")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("address");

                    b.Property<string>("Availability")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("availability");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("DonorId")
                        .HasColumnType("int")
                        .HasColumnName("donor_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Gender")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("gender");

                    b.Property<string>("Lastname")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("lastname");

                    b.Property<string>("Mail")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("mail");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int?>("Telephone")
                        .HasColumnType("int")
                        .HasColumnName("telephone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("VolunteerId")
                        .HasName("PK__Registra__0FE766B10C1C8324");

                    b.ToTable("RegistrationVolunteer", (string)null);
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.SmtpConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Authenticate")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CompanyId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int>("Profile")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("SmtpConfigurations");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("TempCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("TempCodeCreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = false,
                            CreatedAt = new DateTime(2024, 1, 8, 20, 16, 59, 860, DateTimeKind.Local).AddTicks(1489),
                            CreatedBy = 0,
                            Email = "system@email.com",
                            Identification = "9999999999999",
                            Name = "System",
                            Password = "hx7w741jRKptsZJYyBjLQfz4agjKMGEJoK0kVwbbthI=",
                            Salt = "UhfyKxRscxd78Aoj0WOzigBOnis+fUNtHEc8kfQkOCg=",
                            Status = "A",
                            TempCode = "42d3d2e2-4351-4e61-ac9f-a99974993645"
                        });
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Volunteer", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<bool>("Availability")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("ActivityTypeId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Beneficiary", b =>
                {
                    b.HasOne("FundacionAMA.Domain.Entities.Person", "Person")
                        .WithOne("Beneficiary")
                        .HasForeignKey("FundacionAMA.Domain.Entities.Beneficiary", "PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Beneficiaries_Persons");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Brigade", b =>
                {
                    b.HasOne("FundacionAMA.Domain.Entities.Company", "Company")
                        .WithMany("Brigades")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Brigades_Company");

                    b.HasOne("FundacionAMA.Domain.Entities.Person", "Person")
                        .WithMany("Brigades")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Brigades_Persons");

                    b.Navigation("Company");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.BrigadeBeneficiary", b =>
                {
                    b.HasOne("FundacionAMA.Domain.Entities.Beneficiary", "Beneficiary")
                        .WithMany("BrigadeBeneficiaries")
                        .HasForeignKey("BeneficiaryId")
                        .IsRequired()
                        .HasConstraintName("FK_BrigadeBeneficiaries_Beneficiaries");

                    b.HasOne("FundacionAMA.Domain.Entities.BeneficiaryType", "BeneficiaryType")
                        .WithMany("BrigadeBeneficiaries")
                        .HasForeignKey("BeneficiaryTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_BrigadeBeneficiaries_BeneficiaryType");

                    b.HasOne("FundacionAMA.Domain.Entities.Brigade", "Brigade")
                        .WithMany("BrigadeBeneficiaries")
                        .HasForeignKey("BrigadeId")
                        .IsRequired()
                        .HasConstraintName("FK_BrigadeBeneficiaries_Brigades");

                    b.Navigation("Beneficiary");

                    b.Navigation("BeneficiaryType");

                    b.Navigation("Brigade");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.BrigadeVoluntareer", b =>
                {
                    b.HasOne("FundacionAMA.Domain.Entities.Brigade", "Brigade")
                        .WithMany("BrigadeVoluntareers")
                        .HasForeignKey("BrigadeId")
                        .IsRequired()
                        .HasConstraintName("FK_BrigadeVoluntareers_Brigades");

                    b.HasOne("FundacionAMA.Domain.Entities.Volunteer", "Volunteer")
                        .WithMany("BrigadeVoluntareers")
                        .HasForeignKey("VolunteerId")
                        .IsRequired()
                        .HasConstraintName("FK_BrigadeVoluntareers_Volunteers");

                    b.Navigation("Brigade");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.CompanyUser", b =>
                {
                    b.HasOne("FundacionAMA.Domain.Entities.Company", "Company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyUsers_Company");

                    b.HasOne("FundacionAMA.Domain.Entities.User", "User")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyUsers_Users");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.ConsultVolunteer", b =>
                {
                    b.HasOne("FundacionAMA.Domain.Entities.RegistrationVolunteer", "Volunteer")
                        .WithMany("ConsultVolunteers")
                        .HasForeignKey("VolunteerId")
                        .HasConstraintName("FK__ConsultVo__volun__70DDC3D8");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Donation", b =>
                {
                    b.HasOne("FundacionAMA.Domain.Entities.Brigade", "Brigade")
                        .WithMany("Donations")
                        .HasForeignKey("BrigadeId")
                        .HasConstraintName("FK_Donations_Brigades");

                    b.HasOne("FundacionAMA.Domain.Entities.DonationType", "DonationType")
                        .WithMany("Donations")
                        .HasForeignKey("DonationTypeId")
                        .HasConstraintName("FK_Donations_DonationType");

                    b.HasOne("FundacionAMA.Domain.Entities.Donor", "Person")
                        .WithMany("Donations")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_Donations_Donors");

                    b.Navigation("Brigade");

                    b.Navigation("DonationType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Donor", b =>
                {
                    b.HasOne("FundacionAMA.Domain.Entities.Person", "Person")
                        .WithOne("IdNavigation")
                        .HasForeignKey("FundacionAMA.Domain.Entities.Donor", "PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Persons_Donors");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Person", b =>
                {
                    b.HasOne("FundacionAMA.Domain.Entities.IdentificationType", "IdentificationType")
                        .WithMany("People")
                        .HasForeignKey("IdentificationTypeId")
                        .HasConstraintName("FK_Persons_IdentificationType");

                    b.HasOne("FundacionAMA.Domain.Entities.User", "User")
                        .WithMany("People")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Persons_Users");

                    b.Navigation("IdentificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.SmtpConfiguration", b =>
                {
                    b.HasOne("FundacionAMA.Domain.Entities.Company", "Company")
                        .WithMany("SmtpConfigurations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SmtpConfigurations_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Volunteer", b =>
                {
                    b.HasOne("FundacionAMA.Domain.Entities.ActivityType", "ActivityType")
                        .WithMany("Volunteers")
                        .HasForeignKey("ActivityTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Volunteers_ActivityType");

                    b.HasOne("FundacionAMA.Domain.Entities.Person", "Person")
                        .WithOne("VolunteerNavigation")
                        .HasForeignKey("FundacionAMA.Domain.Entities.Volunteer", "PersonId")
                        .HasConstraintName("FK_Volunteers_Persons");

                    b.Navigation("ActivityType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.ActivityType", b =>
                {
                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Beneficiary", b =>
                {
                    b.Navigation("BrigadeBeneficiaries");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.BeneficiaryType", b =>
                {
                    b.Navigation("BrigadeBeneficiaries");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Brigade", b =>
                {
                    b.Navigation("BrigadeBeneficiaries");

                    b.Navigation("BrigadeVoluntareers");

                    b.Navigation("Donations");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Company", b =>
                {
                    b.Navigation("Brigades");

                    b.Navigation("CompanyUsers");

                    b.Navigation("SmtpConfigurations");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.DonationType", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Donor", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.IdentificationType", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Person", b =>
                {
                    b.Navigation("Beneficiary");

                    b.Navigation("Brigades");

                    b.Navigation("IdNavigation");

                    b.Navigation("VolunteerNavigation");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.RegistrationVolunteer", b =>
                {
                    b.Navigation("ConsultVolunteers");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.User", b =>
                {
                    b.Navigation("CompanyUsers");

                    b.Navigation("People");
                });

            modelBuilder.Entity("FundacionAMA.Domain.Entities.Volunteer", b =>
                {
                    b.Navigation("BrigadeVoluntareers");
                });
#pragma warning restore 612, 618
        }
    }
}
